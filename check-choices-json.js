const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkChoicesJson() {
  try {
    console.log('üîç ÎÖ∏Îìú 400Î≤àÏùò Í∏∞Ï°¥ choices JSON ÌôïÏù∏ Ï§ë...');
    
    // ÎÖ∏Îìú 400Î≤àÏùò Í∏∞Ï°¥ choices ÌïÑÎìú ÌôïÏù∏
    const node = await prisma.mainStory.findUnique({
      where: { node_id: 400 }
    });
    
    if (!node) {
      console.log('‚ùå ÎÖ∏Îìú 400Î≤àÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }
    
    console.log('üìã ÎÖ∏Îìú 400Î≤àÏùò choices JSON:');
    console.log(node.choices);
    
    // JSON ÌååÏã± ÏãúÎèÑ
    try {
      const parsedChoices = JSON.parse(node.choices || '[]');
      console.log('\nüîç ÌååÏã±Îêú choices:');
      console.log(JSON.stringify(parsedChoices, null, 2));
    } catch (e) {
      console.log('\n‚ùå JSON ÌååÏã± Ïã§Ìå®:', e.message);
    }
    
    // Îã§Î•∏ Î™á Í∞ú ÎÖ∏ÎìúÎèÑ ÌôïÏù∏
    console.log('\nüîç Îã§Î•∏ ÎÖ∏ÎìúÎì§ ÌôïÏù∏:');
    const otherNodes = await prisma.mainStory.findMany({
      where: { node_id: { in: [401, 650, 651, 652] } },
      orderBy: { node_id: 'asc' }
    });
    
    for (const otherNode of otherNodes) {
      console.log(`\nüìã ÎÖ∏Îìú ${otherNode.node_id} (${otherNode.title}):`);
      console.log(`  choices: ${otherNode.choices}`);
      
      // StoryChoice ÌÖåÏù¥Î∏îÏóêÏÑú ÌôïÏù∏
      const storyChoices = await prisma.storyChoice.findMany({
        where: { story_node_id: otherNode.node_id },
        orderBy: { order_index: 'asc' }
      });
      
      console.log(`  StoryChoice Í∞úÏàò: ${storyChoices.length}`);
      storyChoices.forEach((choice, index) => {
        console.log(`    ${index + 1}. "${choice.choice_text}" -> ${choice.target_node_id}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkChoicesJson();
